#云编译公用核心
name: WRT-CORE

on:
  workflow_call:
    inputs:
      WRT_BRANCH:
        required: true
        type: string
      WRT_TARGET:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_URL:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_CFG:
        required: false
        default: 'false'
        type: string

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_TARGET: ${{inputs.WRT_TARGET}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_URL: ${{inputs.WRT_URL}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_CFG: ${{inputs.WRT_CFG}}

jobs:
  wrt_core:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Projects
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E apt -yqq update
          sudo -E apt -yqq purge $(sed -n "1{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq install $(sed -n "2{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo -E rm -rf $(sed -n "3{s/\r$//g;p;q}" $GITHUB_WORKSPACE/Depends.txt)

      - name: Initialization Values
        run: |
          export WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export WRT_REPO=$(basename $GITHUB_WORKSPACE)
          export WRT_SOURCE=$(echo $WRT_URL | cut -d '/' -f 5-)
          export WRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/Config/$WRT_TARGET.txt)

          echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
          echo "WRT_REPO=$WRT_REPO" >> $GITHUB_ENV
          echo "WRT_SOURCE=$WRT_SOURCE" >> $GITHUB_ENV
          echo "WRT_TYPE=$WRT_TYPE" >> $GITHUB_ENV

      - name: Clone Code
        run: |
          git clone --depth=1 --single-branch --branch $WRT_BRANCH $WRT_URL ./wrt/

      - name: Check Cache
        if: env.WRT_CFG == 'false'
        uses: stupidloud/cachewrtbuild@main
        with:
          ccache: 'true'
          prefix: ${{github.workspace}}/wrt
          mixkey: ${{env.WRT_SOURCE}}-${{env.WRT_TARGET}}

      - name: Check Scripts
        run: |
          find ./ -maxdepth 2 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Update Feeds
        run: |
          cd ./wrt/

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Custom Packages
        run: |
          cd ./wrt/package/

          $GITHUB_WORKSPACE/Scripts/Packages.sh
          $GITHUB_WORKSPACE/Scripts/Handles.sh

      - name: Custom Settings
        run: |
          cd ./wrt/

          rm -rf ./tmp* ./.config*

          cat $GITHUB_WORKSPACE/Config/$WRT_TARGET.txt $GITHUB_WORKSPACE/Config/General.txt >> .config

          $GITHUB_WORKSPACE/Scripts/Settings.sh

          make defconfig

      - name: Download Packages
        if: env.WRT_CFG == 'false'
        run: |
          cd ./wrt/

          make download -j$(nproc)

      - name: Compile Firmware
        if: env.WRT_CFG == 'false'
        run: |
          cd ./wrt/

          make -j$(nproc) || make -j1 V=s

      - name: Machine Information
        run: |
          cd ./wrt/

          echo "======================="
          lscpu | egrep "name|Core|Thread"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1
          echo "======================="

      - name: Prepare artifact
        run: |
          cd ./wrt/
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          #rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./wrt/artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./wrt/artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./wrt/bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./wrt/artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
